/*
package main

import (
	"github.com/bwmarrin/discordgo"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
    "time"
)

type challenges struct {
    Success bool `json:"success"`
    Data []challengeData `json:"data"`
}

type challengeData struct {
    Id int `json:"id"` 
    Challenge_type string `json:"type"`
    Name string `json:"name"`
    Value int `json:"values"`
    Solves int `json:"solves"`
    Solved_by_me bool `json:"solved_by_me"`
    Category string `json:"category"`
    Tags []string `json:"tags"`
    Template_page string `json:"template"`
    Script string `json:"script"`
}

type solves struct {
    Success bool `json:"success"`
    Data []solveData `json:"data"`
}

type solveData struct {
    Account_id int `json:"account_id"`
    TeamName string `json:"name"`
    Data string `json:"data"`
    Account_url string `json:"account_url"`
}
func main() {
    solveSet := make(map[int]bool)
    
    
    //Create a new Discord session using the provided bot token.
    botObject, err := discordgo.New("Bot " + Token)
    if err != nil {
        fmt.Println("Error connecting to bot api", err)
        return;
    }
    
    
    for true {
        req, err := http.NewRequest("GET", base_url, nil)
        if err != nil {
            log.Print(err.Error())
        }
        
        req.Header.Set("Content-Type", "application/json")
        req.Header.Set("Authorization", ctfd_token)

        res, err := http.DefaultClient.Do(req)
        if err != nil {
            log.Print(err.Error())
        }

        defer res.Body.Close()
        body, readErr := io.ReadAll(res.Body)
        if readErr != nil {
            log.Print(err.Error())
        }
        //fmt.Println(string(body))
        
        var response challenges
        json.Unmarshal(body, &response)

        for _, challenge := range response.Data {
            if challenge.Solves != 0 {
                _, exists := solveSet[challenge.Id] 
                if !exists {
                    req, err = http.NewRequest("GET", base_url + "/" + fmt.Sprint(challenge.Id) + "/solves", nil)
                    req.Header.Set("Content-Type", "application/json")
                    req.Header.Set("Authorization", ctfd_token)
                    res, err = http.DefaultClient.Do(req)

                    if err != nil {
                        log.Print(err.Error())
                    }

                    defer res.Body.Close()
                    body, readErr = io.ReadAll(res.Body)
                    if readErr != nil {
                        log.Print(err.Error())
                    }

                    var solveReturned solves
                    json.Unmarshal(body, &solveReturned)
                    
                    botObject.ChannelMessageSend(firstBloodChannelID, "@Competitors " + solveReturned.Data[0].TeamName + " got a First Blood on \"" + challenge.Name + "\" in the category, " + challenge.Category +"!")                

                    solveSet[challenge.Id] = true
                }
            }
        }
        fmt.Println("Waiting 5 seconds until checking again")
        time.Sleep(5 * time.Second)
    }  
    
    botObject.Close()
}
*/
